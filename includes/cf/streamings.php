<?php
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * is recurring = get_post_meta( get_the_ID(), 'twchr_streams_is-recurring', true )
 * Streming title = get_post_meta( get_the_ID(), 'twchr_streams_streming-title', true )
 * serie name = get_post_meta( get_the_ID(), 'twchr_streams_serie-name', true )
 * twitcher category = get_post_meta( get_the_ID(), 'twchr_streams_twitcher-category', true )
 * Duration = get_post_meta( get_the_ID(), 'twchr_streams_duration', true )
 */
class Twchr_streams {
	private $config = '{
						"title":"twchr_streams",
						"prefix":"twchr_streams_",
						"domain":"twchr_streams",
						"class_name":"Twchr_streams",
						"post-type":["post"],
						"context":"normal",
						"priority":"default",
						"cpt":"twchr_streams",
						"fields":[
							{"type":"text","label":"is recurring","id":"twchr_schedule_card_input--is_recurrig"},
							{"type":"text","label":"Streming title","id":"twchr_schedule_card_input--title"},
							{"type":"text","label":"serie name","id":"twchr_streams_serie-name"},
							{"type":"text","label":"twitcher category","id":"twchr_streams_twitcher-category"},
							{"type":"number","label":"Duration","step":"1","id":"twchr_streams_duration"}
							]
						}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			default:
				$this->input( $field );
		}
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

}

function twchr_twchr_streams_meta_boxes(){
	
	function agregar_metabox_twchr_streams() {
		add_meta_box(
			'twchr_streams',
			'ConfiguraciÃ³n de Twitch Streams',
			'twchr_add_meta_box_callback',
			'twchr_streams',
			'normal',
			'high'
		);
	}

	add_action('add_meta_boxes', 'agregar_metabox_twchr_streams');
	
	function twchr_add_meta_box_callback() {

		$tchr_vars_admin = array(
			'twchr_keys' => json_decode( get_option( 'twchr_keys' ) ),
			'twchr_app_token' => get_option( 'twchr_app_token' ),
			'twitcher_data_broadcaster' => json_decode( get_option( 'twchr_data_broadcaster' ) )->{'data'}[0],
			'twitcher_data_clear_all' => get_option( 'twchr_delete_all' ),
			'site_url' => site_url(),
			'wp_api_route' => rest_url(),
			'ajax_url' => admin_url( 'admin-ajax.php' )
		);		

		$post_id = get_the_ID();
		$values  = get_post_custom( $post_id );
		$term_serie = wp_get_post_terms( $post_id, 'serie' );
		$term_cat_twcht = wp_get_post_terms( $post_id, 'cat_twcht' );
		$title = isset( $values['twchr_schedule_card_input--title'] ) ? $values['twchr_schedule_card_input--title'][0] : '';
		$category = isset( $values['twchr_schedule_card_input--category'] ) ? $values['twchr_schedule_card_input--category'][0] : '';
		$date_time = isset( $values['twchr_schedule_card_input--dateTime'] ) ? $values['twchr_schedule_card_input--dateTime'][0] : '';
		$twchr_date_time_slot = isset( $values['twchr_dateTime_slot'] ) ? $values['twchr_dateTime_slot'][0] : '';
		$duration = isset( $values['twchr_schedule_card_input--duration'] ) ? $values['twchr_schedule_card_input--duration'][0] : '';
		$is_recurring = isset( $values['twchr_schedule_card_input--is_recurrig'] ) ? $values['twchr_schedule_card_input--is_recurrig'][0] : false;
		$serie = isset( $values['twchr_schedule_card_input--serie'] ) ? $values['twchr_schedule_card_input--serie'][0] : '';
		$twchr_card_src_priority = isset( $values['twchr-card-src-priority'] ) ? $values['twchr-card-src-priority'][0] : '';
		$twchr_streaming_states = wp_get_post_terms(get_the_ID(), 'twchr_streaming_states');
		
		?>
		<script>
			const TWCHR_CPT_DATA = {
				"$title":'<?php echo $title?>',
				"$is_recurring":'<?php echo $is_recurring?>',
				"$duration":'<?php echo $duration?>',
				"$twchr_date_time_slot":'<?php echo $twchr_date_time_slot?>',
				"$category":'<?php echo $category?>',
				"$serie":'<?php echo $serie?>',
				"$twchr_card_src_priority":'<?php echo $twchr_card_src_priority?>',
				"$date_time":'<?php echo $date_time?>',
				"$term_serie":`<?php echo json_encode($term_serie)?>`,
				"$term_cat_twcht":`<?php echo json_encode($term_cat_twcht)?>`,
				"$twchr_twicth_twitch_cat_img":`<?php if(COUNT($term_cat_twcht) > 0) echo get_term_meta( $term_cat_twcht[0]->term_id, 'twchr_stream_category_thumbail', true ) ?>`,
				"$twchr_streaming_states": <?php if(COUNT($twchr_streaming_states) > 0) {echo "JSON.parse('".json_encode($twchr_streaming_states)."')";} else {echo '""';}?>",
				"$twchr_streams__yt-link-video-src": "<?php echo get_post_meta( get_the_ID(), 'twchr_streams__yt-link-video-src',true)?>",
				"$twchr-from-api_id": "<?php echo get_post_meta( get_the_ID(), 'twchr-from-api_id',true)?>",
				"$twchr-from-api_duration": "<?php echo get_post_meta( get_the_ID(), 'twchr-from-api_duration',true)?>",
				"$twchr-from-api_thumbnail_url": "<?php echo get_post_meta( get_the_ID(), 'twchr-from-api_thumbnail_url',true)?>"
			};

			const TWCHR_CPT_ADMIN_VAR = JSON.parse('<?php echo json_encode($tchr_vars_admin)?>');
		</script>
		<table class="form-table" role="presentation">
			<tbody>
				
			</tbody>
		</table>
		<?php
		
	
	}
	
	
}

add_action("init","twchr_twchr_streams_meta_boxes");
